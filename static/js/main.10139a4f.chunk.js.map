{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","input","messages","solved","inputError","handleSubmit","bind","assertThisInitialized","onChange","e","preventDefault","_this$state","toLocaleLowerCase","setState","event","target","value","_this$state2","react_default","a","createElement","className","onSubmit","type","placeholder","map","element","index","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAGqBA,qBACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,MAAO,GACPC,SAAU,GACVC,QAAQ,EACRC,YAAY,GAGdX,EAAKY,aAAeZ,EAAKY,aAAaC,KAAlBZ,OAAAa,EAAA,EAAAb,CAAAD,IACpBA,EAAKe,SAAWf,EAAKe,SAASF,KAAdZ,OAAAa,EAAA,EAAAb,CAAAD,IAXCA,4EAcNgB,GACXA,EAAEC,iBADY,IAAAC,EAEgCf,KAAKI,MAA7CC,EAFQU,EAERV,MAAOC,EAFCS,EAEDT,SAAUC,EAFTQ,EAESR,OAAQC,EAFjBO,EAEiBP,WAE3BD,IAOmB,eALvBF,EAAQA,EAAMW,sBAMZT,GAAS,EACTC,GAAa,GAEbA,GAAa,EAGfR,KAAKiB,SAAS,CAAEX,WAAUC,SAAQC,iDAG3BU,GACPlB,KAAKiB,SAAS,CAAEZ,MAAOa,EAAMC,OAAOC,yCAG7B,IAAAC,EACyCrB,KAAKI,MAA7CC,EADDgB,EACChB,MAAOC,EADRe,EACQf,SAAUC,EADlBc,EACkBd,OAAQC,EAD1Ba,EAC0Bb,WACjC,OACEc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAd,gBAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACbH,EAAAC,EAAAC,cAAA,4IACAF,EAAAC,EAAAC,cAAA,iFAEAF,EAAAC,EAAAC,cAAA,QAAME,SAAU1B,KAAKS,cACnBa,EAAAC,EAAAC,cAAA,SACEG,KAAK,OACLF,UAAW,aAAejB,EAAa,eAAiB,KAAOD,EAAS,gBAAkB,IAC1FqB,YAAY,wBACZR,MAAOf,EACPO,SAAUZ,KAAKY,WAEjBU,EAAAC,EAAAC,cAAA,UACEG,KAAK,SACLF,UAAU,yCAFZ,WAMDlB,GACCe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,iIAIHlB,EAASuB,IAAI,SAACC,EAASC,GACpB,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAA0BO,IAAKD,GAC5CT,EAAAC,EAAAC,cAAA,SAAIM,gBA3ESG,IAAMC,YCSnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.10139a4f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      input: '',\r\n      messages: [],\r\n      solved: false,\r\n      inputError: false\r\n    }\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    let { input, messages, solved, inputError } = this.state;\r\n\r\n    if (solved) return;\r\n\r\n    input = input.toLocaleLowerCase();\r\n\r\n    /*if (input === 'sean') {\r\n      messages.unshift('Close');\r\n      inputError = false;\r\n    } else */if (input === 'alohamora') {\r\n      solved = true;\r\n      inputError = false;\r\n    } else {\r\n      inputError = true;\r\n    }\r\n\r\n    this.setState({ messages, solved, inputError });\r\n  }\r\n\r\n  onChange(event) {\r\n    this.setState({ input: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    const { input, messages, solved, inputError } = this.state;\r\n    return (\r\n      <div className=\"App uk-light\">\r\n        <header className=\"App-header\">\r\n          <h1 className=\"uk-margin-top\">MSIG Puzzle</h1>\r\n        </header>\r\n        <div className=\"uk-card card uk-align-center\">\r\n          <div className=\"uk-margin-left uk-margin-right\">\r\n            <p>Hello! This is the page to submit answers to the puzzle we submitted as a part of our application to the Microsoft Intern Game.</p>\r\n            <p>If you don't know what this page is, you probably shouldn't be here.</p>\r\n\r\n            <form onSubmit={this.handleSubmit}>\r\n              <input\r\n                type=\"text\"\r\n                className={'uk-input ' + (inputError ? 'input-error ' : '') + (solved ? 'input-success' : '')}\r\n                placeholder=\"Submit an answer here\"\r\n                value={input}\r\n                onChange={this.onChange} />\r\n      \r\n              <button\r\n                type=\"submit\"\r\n                className=\"uk-button uk-button-default uk-margin\"\r\n                >Submit</button>\r\n            </form>\r\n\r\n            {solved &&\r\n              <div className=\"uk-card uk-text-success\">\r\n                <p>Good job! Now that you've found the spell to open doors, we're hoping that you'll open our door to the intern game!</p>\r\n              </div>\r\n            }\r\n\r\n            {messages.map((element, index) => {\r\n                return (\r\n                  <div className=\"uk-card uk-text-warning\" key={index}>\r\n                    <p>{element}</p>\r\n                  </div>\r\n                );\r\n              })\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'uikit/dist/css/uikit.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}