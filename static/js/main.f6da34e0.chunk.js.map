{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","input","messages","solved","inputError","handleSubmit","bind","assertThisInitialized","onChange","e","preventDefault","_this$state","toLocaleLowerCase","unshift","setState","event","target","value","_this$state2","react_default","a","createElement","className","onSubmit","type","placeholder","map","element","index","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAGqBA,qBACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,MAAO,GACPC,SAAU,GACVC,QAAQ,EACRC,YAAY,GAGdX,EAAKY,aAAeZ,EAAKY,aAAaC,KAAlBZ,OAAAa,EAAA,EAAAb,CAAAD,IACpBA,EAAKe,SAAWf,EAAKe,SAASF,KAAdZ,OAAAa,EAAA,EAAAb,CAAAD,IAXCA,4EAcNgB,GACXA,EAAEC,iBADY,IAAAC,EAEgCf,KAAKI,MAA7CC,EAFQU,EAERV,MAAOC,EAFCS,EAEDT,SAAUC,EAFTQ,EAESR,OAAQC,EAFjBO,EAEiBP,WAIjB,UAFdH,EAAQA,EAAMW,sBAGZV,EAASW,QAAQ,SACjBT,GAAa,GACM,SAAVH,GACTE,GAAS,EACTC,GAAa,GAEbA,GAAa,EAGfR,KAAKkB,SAAS,CAAEZ,WAAUC,SAAQC,gDAG3BW,GACPnB,KAAKkB,SAAS,CAAEb,MAAOc,EAAMC,OAAOC,yCAG7B,IAAAC,EACyCtB,KAAKI,MAA7CC,EADDiB,EACCjB,MAAOC,EADRgB,EACQhB,SAAUC,EADlBe,EACkBf,OAAQC,EAD1Bc,EAC0Bd,WACjC,OACEe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAd,gBAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACbH,EAAAC,EAAAC,cAAA,4IACAF,EAAAC,EAAAC,cAAA,iFAEAF,EAAAC,EAAAC,cAAA,QAAME,SAAU3B,KAAKS,cACnBc,EAAAC,EAAAC,cAAA,SACEG,KAAK,OACLF,UAAW,aAAelB,EAAa,eAAiB,KAAOD,EAAS,gBAAkB,IAC1FsB,YAAY,wBACZR,MAAOhB,EACPO,SAAUZ,KAAKY,WAEjBW,EAAAC,EAAAC,cAAA,UACEG,KAAK,SACLF,UAAU,yCAFZ,WAMDnB,GACCgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,iIAIHnB,EAASwB,IAAI,SAACC,EAASC,GACpB,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAA0BO,IAAKD,GAC5CT,EAAAC,EAAAC,cAAA,SAAIM,gBAzESG,IAAMC,YCSnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f6da34e0.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      input: '',\n      messages: [],\n      solved: false,\n      inputError: false\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    let { input, messages, solved, inputError } = this.state;\n\n    input = input.toLocaleLowerCase();\n\n    if (input === 'sean') {\n      messages.unshift('Close');\n      inputError = false;\n    } else if (input === 'alli') {\n      solved = true;\n      inputError = false;\n    } else {\n      inputError = true;\n    }\n\n    this.setState({ messages, solved, inputError });\n  }\n\n  onChange(event) {\n    this.setState({ input: event.target.value });\n  }\n\n  render() {\n    const { input, messages, solved, inputError } = this.state;\n    return (\n      <div className=\"App uk-light\">\n        <header className=\"App-header\">\n          <h1 className=\"uk-margin-top\">MSIG Puzzle</h1>\n        </header>\n        <div className=\"uk-card card uk-align-center\">\n          <div className=\"uk-margin-left uk-margin-right\">\n            <p>Hello! This is the page to submit answers to the puzzle we submitted as a part of our application to the Microsoft Intern Game.</p>\n            <p>If you don't know what this page is, you probably shouldn't be here.</p>\n\n            <form onSubmit={this.handleSubmit}>\n              <input\n                type=\"text\"\n                className={'uk-input ' + (inputError ? 'input-error ' : '') + (solved ? 'input-success' : '')}\n                placeholder=\"Submit an answer here\"\n                value={input}\n                onChange={this.onChange} />\n      \n              <button\n                type=\"submit\"\n                className=\"uk-button uk-button-default uk-margin\"\n                >Submit</button>\n            </form>\n\n            {solved &&\n              <div className=\"uk-card uk-text-success\">\n                <p>Good job! Now that you've found the spell to open doors, we're hoping that you'll open our door to the intern game!</p>\n              </div>\n            }\n\n            {messages.map((element, index) => {\n                return (\n                  <div className=\"uk-card uk-text-warning\" key={index}>\n                    <p>{element}</p>\n                  </div>\n                );\n              })\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'uikit/dist/css/uikit.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}